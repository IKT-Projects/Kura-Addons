/*
 * Copyright Â© 2023 Institut fuer Kommunikationstechnik - FH-Dortmund (codebase.ikt@fh-dortmund.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ict.kura.thing.creator;

import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import org.ict.kura.thing.model.ThingConfig;
import org.ict.kura.thing.model.ThingsConfig;
import org.ict.model.jsonld.context.Context;
import org.ict.model.wot.core.ActionAffordance;
import org.ict.model.wot.core.EventAffordance;
import org.ict.model.wot.core.PropertyAffordance;
import org.ict.model.wot.core.Thing;
import org.ict.model.wot.hypermedia.AdditionalProperty;

public interface ThingCreator {

	/**
	 * Create a new thing description with the provided informations. The full thing
	 * id is generated by the combination of the {@link #baseHref} and the
	 * {@link thingId}
	 * 
	 * @param thingId       A relative thingId which is used to create the full id
	 *                      in combination with the {@link #baseHref}
	 * @param title         The title of the thing
	 * @param description   A description of the thing
	 * @param semanticTypes The semantic type this thing should be tagged with
	 * @return A new thing containing the provided informations
	 */

	Thing create(String thingId, String title, String description, URI... semanticTypes);

	List<Thing> createFromConfig(ThingsConfig config);

	List<Thing> createFromConfig(ThingsConfig config, Function<ThingConfig, Thing> mapper);

	/**
	 * Adds a {@code List<PropertyAffordance>} to the provided thing. Since the
	 * thing description contains a {@code Map<String,PropertyAffordance} the
	 * property name is used as the map key.
	 * 
	 * @param thing      The thing to be modified
	 * @param properties A {@code List<PropertyAffordance>} of properties
	 * @return The modified thing
	 */

	Thing addProperties(Thing thing, List<PropertyAffordance> properties);

	/**
	 * Adds a {@code Map<String, PropertyAffordance>} to the provided thing.
	 * 
	 * @param thing      The thing to be modified
	 * @param properties A {@code Map<String, PropertyAffordance>} of properties
	 * @return The modified thing
	 */

	Thing addProperties(Thing thing, Map<String, PropertyAffordance> properties);

	/**
	 * Adds a {@code Map<String, PropertyProviderImpl>} to the provided thing. The
	 * {@link PropertyProviderImpl} implement default configurations of common
	 * properties and simplify the creation of {@link PropertyAffordance}
	 * 
	 * @param thing             The thing to be modified
	 * @param propertyProviders A {@code Map<String, PropertyProviderImpl>} of
	 *                          {@link PropertyProviderImpl}
	 * @return The modified thing
	 * @throws Exception
	 */

	Thing addPropertyTemplates(Thing thing, Map<String, PropertyProviderImpl> propertyProviders) throws Exception;

	/**
	 * Adds a {@code List<ActionAffordance> } to the provided thing. Since the thing
	 * description contains a {@code Map<String,ActionAffordance} the action name is
	 * used as the map key.
	 * 
	 * @param thing   The thing to be modified
	 * @param actions A {@code List<ActionAffordance>} of actions
	 * @return The modified thing
	 */

	Thing addActions(Thing thing, List<ActionAffordance> actions);

	/**
	 * Adds a {@code Map<String, ActionAffordance>} to the provided thing.
	 * 
	 * @param thing   The thing to be modified
	 * @param actions A {@code Map<String, ActionAffordance>} of actions
	 * @return The modified thing
	 */

	Thing addActions(Thing thing, Map<String, ActionAffordance> actions);

	/**
	 * Adds a {@code Map<String, ActionProviderImpl>} to the provided thing. The
	 * {@link ActionProviderImpl} implements default configurations of common
	 * actions and simplify the creation of {@link ActionAffordance}
	 * 
	 * @param thing           The thing to be modified
	 * @param actionProviders A {@code Map<String, ActionProviderImpl>} of
	 *                        {@link ActionProviderImpl}
	 * @return The modified thing
	 * @throws Exception
	 */

	Thing addActionTemplates(Thing thing, Map<String, ActionProviderImpl> actionProviders) throws Exception;

	/**
	 * Adds a {@code List<EventAffordance>} to the provided thing. Since the thing
	 * description contains a {@code Map<String,EventAffordance} the event name is
	 * used as the map key.
	 * 
	 * @param thing  The thing to be modified
	 * @param events A {@code List<EventAffordance>} of events
	 * @return The modified thing
	 */

	Thing addEvents(Thing thing, List<EventAffordance> events);

	/**
	 * Adds a {@code Map<String, EventAffordance>} to the provided thing.
	 * 
	 * @param thing  The thing to be modified
	 * @param events A {@code Map<String, EventAffordance>} of events
	 * @return The modified thing
	 */

	Thing addEvents(Thing thing, Map<String, EventAffordance> events);

	/**
	 * Adds a new binding to a specific property identified by the property key. The
	 * binding is currently always added to the first form element of the specified
	 * property.
	 * 
	 * @param thing       The thing to be modified
	 * @param propertyKey The property key of the property to be modified with the
	 *                    new binding
	 * @param bindings    The binding that should be added
	 * @return The modified thing
	 * @throws Exception
	 */

	Thing addPropertyBinding(Thing thing, String propertyKey, List<AdditionalProperty> bindings) throws Exception;

	/**
	 * Adds a new binding to single property affordance.
	 * 
	 * @param property The property to be modified
	 * @param bindings The new binding for the property
	 * @return The modified property with the new binding
	 * @throws Exception
	 */

	PropertyAffordance addPropertyBinding(PropertyAffordance property, List<AdditionalProperty> bindings)
			throws Exception;

	/**
	 * Adds a new binding to single action affordance.
	 * 
	 * @param action   The action to be modified
	 * @param bindings The new binding for the action
	 * @return The modified action with the new binding
	 * @throws Exception
	 */

	ActionAffordance addActionBinding(ActionAffordance action, List<AdditionalProperty> bindings);

	/**
	 * Adds a new binding to a specific action identified by the action key. The
	 * binding is currently always added to the first form element of the specified
	 * action.
	 * 
	 * @param thing     The thing to be modified
	 * @param actionKey The action key of the action to be modified with the new
	 *                  binding
	 * @param bindings  The binding that should be added
	 * @return The modified thing
	 * @throws Exception
	 */

	Thing addActionBinding(Thing thing, String actionKey, List<AdditionalProperty> bindings) throws Exception;

	/**
	 * Adds a new binding to single event affordance.
	 * 
	 * @param event    The event to be modified
	 * @param bindings The new binding for the event
	 * @return The modified event with the new binding
	 * @throws Exception
	 */

	EventAffordance addEventBinding(EventAffordance event, List<AdditionalProperty> bindings);

	/**
	 * Adds a single new context element to the default or previously created
	 * context array.
	 * 
	 * @param thing   The modified thing
	 * @param context The context to add
	 * @return The modified thing
	 */

	Thing addContext(Thing thing, Context context);

	/**
	 * Deletes/removes a single context element from the current context identified
	 * by the prefix.
	 * 
	 * @param thing   The modified thing
	 * @param context The context to delete
	 * @return The modified thing
	 */

	Thing deleteContext(Thing thing, Context context);

	/**
	 * Helper method to set the minimum and maximum values of a specific property.
	 * 
	 * @param thing          The modified thing
	 * @param interactionKey The property key
	 * @param min            New minimum value
	 * @param max            New maximum value
	 * @return The modified thing with the new minimum and maximum values of the
	 *         specified property
	 */

	Thing setPropertyMinMax(Thing thing, String interactionKey, Integer min, Integer max);

	/**
	 * Helper method to set the minimum and maximum values of a specific property.
	 * 
	 * @param thing          The modified thing
	 * @param interactionKey The property key
	 * @param min            New minimum value
	 * @param max            New maximum value
	 * @return The modified thing with the new minimum and maximum values of the
	 *         specified property
	 */

	Thing setPropertyMinMax(Thing thing, String interactionKey, Double min, Double max);

	/**
	 * Helper method to set the unit of a specific property, action or event
	 * identified by the interactionKey In case of a action the unit is set for the
	 * output schema only, because the input schema is not expected to have a
	 * specific unit.
	 * 
	 * @param thing          The modified thing
	 * @param interactionKey The interaction key
	 * @param unit           New unit as a string
	 * @return The modified thing with the new minimum and maximum values of the
	 *         specified property
	 */

	Thing setInteractionUnit(Thing thing, String interactionKey, String unit);

	/**
	 * Set a custom context by overwriting the current context of the provided
	 * thing.
	 * 
	 * @param thing          The thing to be modified
	 * @param customContexts The new custom context
	 * @return The modified thing
	 */

	Thing setCustomContexts(Thing thing, Context[] customContexts);

	/**
	 * Set a new base HREF for the creator context
	 * 
	 * @param baseHref The new base HREF
	 */

	void setBaseHref(URI baseHref);

	URI getBaseHref();

}